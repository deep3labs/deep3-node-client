/* tslint:disable */
/* eslint-disable */
/**
 * Deep3 Labs API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetChainsResult,
  GetHodlerResult,
  GetModelsResult,
  GetPredictionResult,
} from '../models';
import {
    GetChainsResultFromJSON,
    GetChainsResultToJSON,
    GetHodlerResultFromJSON,
    GetHodlerResultToJSON,
    GetModelsResultFromJSON,
    GetModelsResultToJSON,
    GetPredictionResultFromJSON,
    GetPredictionResultToJSON,
} from '../models';

export interface GetHodlerPredictionRequest {
    chainId: number;
    publicAddress: string;
}

export interface GetPredictionRequest {
    model: string;
    chainId: number;
    publicAddress: string;
}

/**
 * 
 */
export class Deep3Api extends runtime.BaseAPI {

    /**
     * Will return currently supported chains
     * Get currently supported chains and the active machine learning models
     */
    async getChainsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChainsResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/chains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChainsResultFromJSON(jsonValue));
    }

    /**
     * Will return currently supported chains
     * Get currently supported chains and the active machine learning models
     */
    async getChains(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChainsResult> {
        const response = await this.getChainsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Will return the prediction
     * Get a Hodler prediction
     */
    async getHodlerPredictionRaw(requestParameters: GetHodlerPredictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHodlerResult>> {
        if (requestParameters.chainId === null || requestParameters.chainId === undefined) {
            throw new runtime.RequiredError('chainId','Required parameter requestParameters.chainId was null or undefined when calling getHodlerPrediction.');
        }

        if (requestParameters.publicAddress === null || requestParameters.publicAddress === undefined) {
            throw new runtime.RequiredError('publicAddress','Required parameter requestParameters.publicAddress was null or undefined when calling getHodlerPrediction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/hodler/{chainId}/{publicAddress}`.replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters.chainId))).replace(`{${"publicAddress"}}`, encodeURIComponent(String(requestParameters.publicAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHodlerResultFromJSON(jsonValue));
    }

    /**
     * Will return the prediction
     * Get a Hodler prediction
     */
    async getHodlerPrediction(requestParameters: GetHodlerPredictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHodlerResult> {
        const response = await this.getHodlerPredictionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Will return active machine learning models
     * Get active machine learning models and the chains they support
     */
    async getModelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetModelsResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/models`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetModelsResultFromJSON(jsonValue));
    }

    /**
     * Will return active machine learning models
     * Get active machine learning models and the chains they support
     */
    async getModels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetModelsResult> {
        const response = await this.getModelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Will return the prediction
     * Get a prediction
     */
    async getPredictionRaw(requestParameters: GetPredictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPredictionResult>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling getPrediction.');
        }

        if (requestParameters.chainId === null || requestParameters.chainId === undefined) {
            throw new runtime.RequiredError('chainId','Required parameter requestParameters.chainId was null or undefined when calling getPrediction.');
        }

        if (requestParameters.publicAddress === null || requestParameters.publicAddress === undefined) {
            throw new runtime.RequiredError('publicAddress','Required parameter requestParameters.publicAddress was null or undefined when calling getPrediction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // ApiKey authentication
        }

        const response = await this.request({
            path: `/prediction/{model}/{chainId}/{publicAddress}`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))).replace(`{${"chainId"}}`, encodeURIComponent(String(requestParameters.chainId))).replace(`{${"publicAddress"}}`, encodeURIComponent(String(requestParameters.publicAddress))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPredictionResultFromJSON(jsonValue));
    }

    /**
     * Will return the prediction
     * Get a prediction
     */
    async getPrediction(requestParameters: GetPredictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPredictionResult> {
        const response = await this.getPredictionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
